{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ScriptoForm","text":"<p>Note: This site contains legacy documentation and is no longer maintained. The current ScriptoForm documentation is now available at: ScriptoForm Docs</p>"},{"location":"#what-is-a-scriptoform","title":"What is a ScriptoForm","text":"<p>A ScriptoForm is a PowerShell script that generates and displays a Microsoft Windows Forms application that can be used for a specific management or system administration task in a computer network environment.  Typically, a ScriptoForm is compiled into an executable file which hides the PowerShell console window during execution and provides a more seamless and familiar experience to the user.</p> <p>A ScriptoForm project is the set of files and folders including the PowerShell script, typically stored in a GIT repository, that are used to compile the executable file using the Microsoft .NET CLI utility (dotnet.exe) which is available with any Microsoft .NET SDK.  The ScriptoForm project includes a C# file which the compiler will use as the source for the executable, and a C# project file (csproj file) which provides the set of instructions used to compile the executable.</p>"},{"location":"#why-use-a-scriptoform","title":"Why use a ScriptoForm","text":"<p>A ScriptoForm is essentially a PowerShell script that provides the user interaction to the script with a Windows form instead of a command line interface.  It was developed to simplify running complicated IT workflows with PowerShell scripts that require user interaction.  When coded to do so, it provides many user friendly features that we are accustomed to with a WinForms application.  For example, you can code a ScriptoForm to:</p> <ul> <li>Pre-load text into a textbox that enforces naming standards (e.g. an Active Directory group name should have a specific prefix per your corporate standards)</li> <li>Enforce a specific case for data in real time (e.g. a Windows server name should always be uppercase per your corporate standards)</li> <li>Enforce text length in real time (e.g. a Windows server name should never be more that 15 character long per NETBIOS requirements)</li> <li>Notify the user that they are typing in invalid characters as they type them (e.g. a Windows server name should not contain a space or other special characters)</li> <li>Enforce a specific date range (e.g. a user should never be allowed to select a date in the past)</li> </ul> <p>A ScriptoForm not only provides a user friendly experience for script interaction but also helps to ensure that corporate IT naming standards and business rules are followed and can provide instant feedback if they are not.</p>"},{"location":"#default-vendor-management-tools","title":"Default vendor management tools","text":"<p>The management tools provided by vendors to manage their individual products, by their very nature, are designed to be as generic as possible.  They need to be able to handle all possible combinations of settings and options because they cannot possibly know what specific task you are trying to accomplish or your corporate requirements, IT naming standards, or business rules.  Thus they typically provide a \"single pane of glass\" management application. </p> <p>A ScriptoForm allows you to perform the exact task you need to complete without having to navigate through the complicated management tool provided by the vendor.  If designed properly, a ScriptoForm can enforce all your corporate IT naming standards and business rules and eliminate all the individual steps normally required in the vendors native tool.  No clicking through menus, wizards, or other complex interfaces - you simply type in the required information and click the \"Run\" button.</p>"},{"location":"#smartacedesignsscriptoformtemplates-module","title":"SmartAceDesigns.ScriptoFormTemplates Module","text":"<p>This PowerShell module was designed to provide a simple method to scaffold a Windows Forms application, built with PowerShell, that can be used as a starting point for your ScriptoForm project.  A lot of initial coding is required to setup a ScriptoForm from scratch.  This module was developed to alleviate that problem.  When used with the Visual Studio Code snippets file, you can easily add any addition controls to the form as needed (or manually code them once you become more comfortable working with .NET WinForms objects in PowerShell) to provide the script interaction and feedback.  You add PowerShell code to work with the user input provided by the form, that follows and enforces your business logic and rules, to complete the steps in the workflow that the ScriptoForm will be used to complete.</p> <p>A means to compile the ScriptoForm script and optional support files (referenced by the script) into an executable was developed to provide a more user-friendly method of running the script and is included natively with this module.  This process was designed with four goals in mind:</p> <ul> <li>The executable should be easy to compile and not require a complicated development environment.  For example, a script developer should be able to use a simple one-line command and the widely available .NET SDK to generate the executable.  The script file should be embedded into the executable as a resource file.</li> <li>The script file should be able to reference any number of separate support files that are included in the executable.  For example, a static HTLM email template file used by the script when sending an email should be packaged, also as a resource file, along with the script file in the executable.  This makes the executable more portable.</li> <li>The executable should be able to dynamically select the version of PowerShell to use when running the script file but also controlled the user as needed.  For example, if PowerShell 7 is installed, the script should default to that version unless explicitly excluded by the user with a command line argument to the executable.  If no versions of PowerShell are installed, then the script should fall back to Windows PowerShell.</li> <li>The executable should be seamless and hide the PowerShell console window when executed.  This makes for a familiar experience that users of a WinForms application are accustomed to.</li> </ul>"},{"location":"Components/ErrorProvider/","title":"ErrorProvider Component","text":"<p>In a ScriptoForm, an ErrorProvider component provides a user interface for indicating that a control on a form has an error associated with it or to notify the user of a data entry error.  This normally manifests itself in the form of a red \"X\" icon in the vicinity of the control in a error state that includes a tooltip that provides a customizable error message.  A single ErrorProvider component can be used with multiple controls on a form.</p> <p></p>"},{"location":"Components/ErrorProvider/#examples","title":"Examples","text":"<pre><code># Create the ErrorProvider:\n$ErrorProviderMain = New-Object -TypeName System.Windows.Forms.ErrorProvider\n\n# Display error icon with custom error message if invalid data detected:\n$ErrorProviderMain.SetIconPadding($TextBoxName,-20)\n$ErrorProviderMain.SetError($TextBoxName,\"Error\u00a0message.\")\n\n# Clear error icon if valid data detected:\n$ErrorProviderMain.Clear()\n</code></pre>"},{"location":"Components/ErrorProvider/#notes","title":"Notes","text":"<p>The above example shows how to display the error icon within the control text region instead of outside of it by using a negative parameter value in the SetIconPadding method.</p>"},{"location":"Components/ErrorProvider/#references","title":"References","text":"<p>ErrorProvider Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Components/ImageList/","title":"ImageList Component","text":"<p>In a ScriptoForm, an ImageList component is used to manage a collection of\u00a0Image\u00a0objects.  An ImageList\u00a0is typically used by other controls, such as the\u00a0ListView,\u00a0TreeView, or\u00a0ToolBar. You can add bitmaps or icons to the\u00a0ImageList, and the other controls are able to use the images as they require.</p>"},{"location":"Components/ImageList/#examples","title":"Examples","text":"<pre><code># Create the ImageList and assign properties:\n$ImageListMain = New-Object -TypeName System.Windows.Forms.ImageList\n$ImageListMain.TransparentColor = [Drawing.Color]::Transparent\n$ImageListMain.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit\n$ImageListMain.ImageSize = New-Object -TypeName System.Drawing.Size(32,32)\n\n# Add files to the ImageList:\n$ImageListMain.Images.Add([Drawing.Image]::FromFile($ToolPNGFile))\n$ImageListMain.Images.Add([Drawing.Image]::FromFile($ScriptICOFile))\nforeach ($IconFile in Get-ChildItem $CustomIconsLocation)\n{ \n    $ImageListMain.Images.Add($IconFile.BaseName,[System.Drawing.Icon]::ExtractAssociatedIcon($IconFile.FullName))\n}\n\n# Assign the ImageList to a control:\n$ListViewMain.LargeImageList\u00a0=\u00a0$ImageListMain\n</code></pre>"},{"location":"Components/ImageList/#notes","title":"Notes","text":"<p>The above code example shows how to use an ImageList component to store images for use by a ListView control.</p>"},{"location":"Components/ImageList/#references","title":"References","text":"<p>ImageList Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Controls/ComboBox/","title":"ComboBox Control","text":"<p>A ComboBox control allows a user to interactively select one of multiple items from a drop-down style list, which can be used to determine various actions performed by a ScriptoForm.</p> <p></p> <p>In the ScriptoForm PowerShell script file, a ComboBox control should be instantiated in the Controls region and then defined within the main forms script block.  If using the VS Code snippets file, the Controls: Label &amp; ComboBox snippet can be used to instantiate a default ComboBox and Label pair in the script and the Properties: Label &amp; ComboBox snippet can be used to assign a default set of properties to them.</p> <p>Designing the functionality and behavior of a ComboBox within a ScriptoForm might include:</p> <ul> <li>The items can in a ComboBox can be pre-added during the <code>OnLoad()</code> event of the main form and\\or modified at runtime</li> <li>Actions can be performed when trigged by the <code>SelectedIndexChanged()</code> event of a ComboBox</li> <li>The value of the selected text in a ComboBox can be obtained from the <code>Text</code> property</li> </ul>"},{"location":"Controls/ComboBox/#examples","title":"Examples","text":"<p>Instantiate a control pair: <pre><code>#region Controls\n$LabelEnvironment = New-Object -TypeName System.Windows.Forms.Label\n$ComboBoxEnvironment = New-Object -TypeName System.Windows.Forms.ComboBox\n#endregion\n</code></pre></p> <p>Set properties on a control pair: <pre><code>#region Forms\n$ShowFormMain =\n{\n    # ...\n    $LabelEnvironment.Location = New-Object -TypeName System.Drawing.Point(15,70)\n    $LabelEnvironment.AutoSize = $true\n    $LabelEnvironment.Text = \"Environment:\"\n    $GroupBoxMain.Controls.Add($LabelEnvironment)\n\n    $ComboBoxEnvironment.Location = New-Object -TypeName System.Drawing.Point(15,90)\n    $ComboBoxEnvironment.Size = New-Object -TypeName System.Drawing.Size(($FormWidth - 50),20)\n    $ComboBoxEnvironment.TabIndex = 1\n    $ComboBoxEnvironment.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList\n    $ComboBoxEnvironment.Add_SelectedIndexChanged($ComboBoxEnvironment_SelectedIndexChanged)\n    $GroupBoxMain.Controls.Add($ComboBoxEnvironment)\n    # ...\n}\n#endregion\n</code></pre></p> <p>Add items to a ComboBox: <pre><code>$FormMain_Load =\n{\n    if (Test-Path -Path $EnvironmentsFile)\n    {\n        $ComboBoxEnvironment.Items.AddRange($(Get-Content -Path $EnvironmentsFile))\n        $ComboBoxEnvironment.SelectedIndex = 0\n    }\n}\n</code></pre></p> <p>Select text value of a ComboBox: <pre><code>$Environment = $ComboBoxEnvironment.Text\n</code></pre></p>"},{"location":"Controls/ComboBox/#notes","title":"Notes","text":"<p>The <code>DropDownStyle</code> property of a ComboBox determines one of three ComboBoxStyle behaviors the ComboBox will exhibit.  Typically, in a ScriptoForm, the <code>DropDownList</code> style is used, which indicates the list is non-interactive and cannot be modified by the user.</p>"},{"location":"Controls/ComboBox/#references","title":"References","text":"<p>ComboBox Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Controls/DataGridView/","title":"DataGridView Control","text":"<p>A DataGridView control is used to provide a customizable and sortable table for displaying data to the user.</p> <p></p> <p>In the ScriptoForm PowerShell script file, a ComboBox control should be instantiated in the Controls region and then defined within the main forms script block.</p>"},{"location":"Controls/DataGridView/#examples","title":"Examples","text":"<p>Instantiate a DataGridView control: <pre><code>$DataGridViewProcesses = New-Object -TypeName System.Windows.Forms.DataGridView\n</code></pre></p> <p>Set properties on a DataGridView control: <pre><code>$DataGridViewProcesses.Location = New-Object -TypeName System.Drawing.Point(15,35)\n$DataGridViewProcesses.Size = New-Object -TypeName System.Drawing.Size(($FormWidth - 50),325)\n$DataGridViewProcesses.TabStop = $false\n$DataGridViewProcesses.RowTemplate.Height = 20\n$DataGridViewProcesses.DataBindings.DefaultDataSourceUpdateMode = [System.Windows.Forms.DataSourceUpdateMode]::OnValidation\n$DataGridViewProcesses.ScrollBars = [System.Windows.Forms.ScrollBars]::Vertical\n$DataGridViewProcesses.RowHeadersVisible = $false\n$DataGridViewProcesses.AllowUserToResizeRows = $false\n$DataGridViewProcesses.ReadOnly = $true\n$DataGridViewProcesses.AllowUserToAddRows = $false\n$DataGridViewProcesses.AllowUserToDeleteRows = $false\n$GroupBoxMain.Controls.Add($DataGridViewProcesses)\n</code></pre></p>"},{"location":"Controls/DataGridView/#notes","title":"Notes","text":"<p>The data used with a DataGridView control should first be converted  into a System.Data.DataTable .NET object type so that it can be sorted interactively.</p>"},{"location":"Controls/DataGridView/#references","title":"References","text":"<p>DataGridView Class (System.Windows.Forms) | Microsoft Learn DataTable Class (System.Data) | Microsoft Learn</p>"},{"location":"Controls/DateTimePicker/","title":"DateTimePicker Control","text":"<p>A DateTimePicker control allows the user to select a date and a time and in a specified format, which can be used to determine various actions performed by a ScriptoForm.</p> <p> </p> <p>In the ScriptoForm PowerShell script file, a DateTimePicker control should be instantiated in the\u00a0Controls\u00a0region and then defined within the\u00a0main forms\u00a0script block. If using the VS Code snippets file, the\u00a0Controls: Label &amp; DateTimePicker\u00a0snippet can be used to instantiate a default DateTimePicker and\u00a0Label\u00a0pair in the script and the\u00a0Properties: Label &amp; DateTimePicker\u00a0snippet can be used to assign a default set of properties to them.</p> <p>Designing the functionality and behavior of a DateTimePicker within a ScriptoForm might include:</p> <ul> <li>The initial date\\time value in a DateTimePicker can be set by using the <code>Text</code> property</li> <li>The value of the date\\time in a DateTimePicker can be obtained from the <code>Text</code> property</li> <li>A minimum date\\time in a DateTimePicker can be enforced by using the <code>MinDate</code> property</li> <li>The format of the date\\time in a DateTimePicker can be controlled by using the <code>Format</code> and <code>CustomFormat</code> properties</li> </ul>"},{"location":"Controls/DateTimePicker/#examples","title":"Examples","text":"<p>Instantiate a control pair: <pre><code>#region Controls\n$LabelDate = New-Object -TypeName System.Windows.Forms.Label\n$DateTimePickerDate = New-Object -TypeName System.Windows.Forms.DateTimePicker\n#endregion\n</code></pre></p> <p>Set properties on a control pair: <pre><code>$DateTimePickerDate.Location = New-Object -TypeName System.Drawing.Point(15,145)\n$DateTimePickerDate.Size = New-Object -TypeName System.Drawing.Size(($FormWidth - 50),20)\n$DateTimePickerDate.TabIndex = 2\n$DateTimePickerDate.Format = [System.Windows.Forms.DateTimePickerFormat]::Custom\n$DateTimePickerDate.CustomFormat = \"MM/dd/yyyy\"\n$DateTimePickerDate.MinDate = [System.DateTime]::Today\n$DateTimePickerDate.Text = ((Get-Date).AddDays(1)).ToString(\"MM/dd/yyyy\")\n$GroupBoxMain.Controls.Add($DateTimePickerDate)\n</code></pre></p> <p>Select date value of a DateTimePicker: <pre><code>$RestartDate = $DateTimePickerDate.Text\n</code></pre></p>"},{"location":"Controls/DateTimePicker/#notes","title":"Notes","text":"<p>In the above example, the DateTimePicker control only selects a date and uses a \"Month(2)/Day(2)/Year(4)\" format.</p>"},{"location":"Controls/DateTimePicker/#references","title":"References","text":"<p>DateTimePicker Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Controls/Label/","title":"Label Control","text":"<p>In a ScriptoForm, a Label control is used to provide descriptive text for another control on the Windows form. For example, you can use a\u00a0Label to add descriptive text for a\u00a0TextBox\u00a0control to inform the user about the type of data expected in the control.</p> <p></p>"},{"location":"Controls/Label/#examples","title":"Examples","text":"<pre><code>$LabelName = New-Object -TypeName System.Windows.Forms.Label\n\n$LabelName.Location = New-Object -TypeName System.Drawing.Point(15,15)\n$LabelName.AutoSize = $true\n$LabelName.Text = \"Group Name:\"\n$GroupBoxMain.Controls.Add($LabelName)\n</code></pre>"},{"location":"Controls/Label/#notes","title":"Notes","text":"<p>A Label control is usually paired with another control such as a TextBox or ComboBox.</p>"},{"location":"Controls/Label/#references","title":"References","text":"<p>Label Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Controls/ListView/","title":"ListView Control","text":"<p>In a ScriptoForm, a ListView control is used to display a collection of items represented by icons and/or text.  These items can be interactive giving you the ability to double-click an item to perform an action within the ScriptoForm.  Items with a ListView can be divided in to separate groups by using a ListViewGroup object to group items by a useful category.</p> <p></p>"},{"location":"Controls/ListView/#examples","title":"Examples","text":"<pre><code>$ListViewItems = New-Object -TypeName System.Windows.Forms.ListView\n$ListViewGroupTools = New-Object -TypeName System.Windows.Forms.ListViewGroup\n$ListViewGroupScripts = New-Object -TypeName System.Windows.Forms.ListViewGroup\n\n$ListViewItems.Anchor = \"Top,Bottom,Left,Right\"\n$ListViewItems.MultiSelect = $false\n$ListViewItems.ContextMenuStrip = $ContextMenuStripListView\n$ListViewItems.LabelWrap = $false\n$ListViewItems.LargeImageList = $ImageList\n$ListViewItems.Location = New-Object -TypeName System.Drawing.Point(13,15)\n$ListViewItems.Size = New-Object -TypeName System.Drawing.Size((430 + $FormWidthOffset),(347 + $FormHeightOffset))\n$ListViewItems.Sorting = [System.Windows.Forms.SortOrder]::Ascending\n$ListViewItems.TabIndex = 0\n$ListViewItems.View = [System.Windows.Forms.View]::Tile\n$ListViewItems.Add_DoubleClick($ListViewItems_DoubleClick)\n$ListViewItems.Add_Click($ListViewItems_Click)\n$ListViewItems.Add_MouseDown($ListViewItems_MouseDown)\n$FormMain.Controls.Add($ListViewItems)\n\n$ListViewGroupTools.Header = \"Tools\"\n[void]$ListViewItems.Groups.Add($ListViewGroupTools)\n\n$ListViewGroupScripts.Header = \"Scripts\"\n[void]$ListViewItems.Groups.Add($ListViewGroupScripts)\n</code></pre>"},{"location":"Controls/ListView/#notes","title":"Notes","text":"<p>Starting with Microsoft .NET 5, the ability to collapse/expand a ListView group was added as well as several other useful features.</p>"},{"location":"Controls/ListView/#references","title":"References","text":"<p>ListView Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Controls/TextBox/","title":"TextBox Control","text":"<p>In a ScriptoForm, a TextBox control allows the user to provide text or numerical data to the underlying script.</p> <p></p>"},{"location":"Controls/TextBox/#examples","title":"Examples","text":"<p>A basic TextBox control: <pre><code>$TextBoxName = New-Object -TypeName System.Windows.Forms.TextBox\n\n$TextBoxName.Location = New-Object -TypeName System.Drawing.Point(15,35)\n$TextBoxName.Size = New-Object -TypeName System.Drawing.Size(($FormWidth - 50),20)\n$TextBoxName.TabIndex = 0\n$TextBoxName.Add_TextChanged($TextBoxName_TextChanged)\n$GroupBoxMain.Controls.Add($TextBoxName)\n\n$TextBoxName_TextChanged =\n{\n\u00a0 \u00a0 if ($TextBoxName.TextLength -eq 0)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 $ErrorProviderMain.Clear()\n\u00a0 \u00a0 \u00a0 \u00a0 $ButtonRun.Enabled = $false\n\u00a0 \u00a0 }\n\u00a0 \u00a0 else\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 $ErrorProviderMain.Clear()\n\u00a0 \u00a0 \u00a0 \u00a0 $ButtonRun.Enabled = $true\n\u00a0 \u00a0 }\n}\n</code></pre> Enforcing upper case characters: <pre><code>$TextBoxName.CharacterCasing = [System.Windows.Forms.CharacterCasing]::Upper\n</code></pre> Highlight specific text when a TextBox receives focus: <pre><code>$TextBoxEmail.Add_GotFocus($TextBoxEmail_GotFocus)\n\n$TextBoxEmail_GotFocus =\n{\n    if ($TextBoxEmail.TextLength -ne 0)\n    {\n        try\n        {\n            $EmailDomainName = (New-Object -TypeName MailAddress($TextBoxEmail.Text)).Host\n            $TextBoxEmail.SelectionStart = 0\n            $TextBoxEmail.SelectionLength = ($TextBoxEmail.TextLength - ($EmailDomainName.Length + 1))\n        }\n        catch {$TextBoxEmail.SelectionStart = 0}\n    }\n}\n\n# Alternate method:\n$TextBoxParameters.Add_GotFocus($TexBoxParmameters_GotFocus)\n\n$TexBoxParmameters_GotFocus =\n{\n\u00a0 \u00a0 $TextBoxParameters.SelectionStart = 20\n\u00a0 \u00a0 $TextBoxParameters.SelectionLength = 10\n}\n</code></pre></p>"},{"location":"Controls/TextBox/#notes","title":"Notes","text":"<p>A TextBox control is normally paired with a Label control.</p>"},{"location":"Controls/TextBox/#references","title":"References","text":"<p>TextBox Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Forms/Assembly/","title":"Assembly","text":"<p>An Assembly is a collection of types and resources that are built to work together and form a logical unit of functionality.  In a ScriptoForm, assemblies are used to implement Windows forms and child controls and components.  They can be referenced by using the\u00a0<code>Add-Type</code>\u00a0cmdlet, which lets you define a Microsoft .NET class in your PowerShell session available in the referenced assembly.  You can then instantiate objects, by using the\u00a0<code>New-Object</code>\u00a0cmdlet, and use the objects just as you would use any .NET object.</p>"},{"location":"Forms/Assembly/#examples","title":"Examples","text":"<pre><code>Add-Type -AssemblyName System.Windows.Forms\n\n# Other lesser used assemblies:\nAdd-Type -AssemblyName System.Windows.Forms.DataVisualization\nAdd-Type -AssemblyName System.Drawing\nAdd-Type -AssemblyName System.Data\nAdd-Type -AssemblyName System.Xml\n</code></pre>"},{"location":"Forms/Assembly/#notes","title":"Notes","text":"<p>An Assembly must be loaded prior to instantiating any form or control defined in it.</p>"},{"location":"Forms/Assembly/#references","title":"References","text":"<p>Assemblies in .NET | Microsoft Learn Add-Type (Microsoft.PowerShell.Utility) - PowerShell | Microsoft Learn</p>"},{"location":"Forms/Control-vs-Component/","title":"Control vs. Component","text":"<ul> <li>A component does not draw itself on the form, but a control draws itself on the form or on another control. Both the Components and the Controls can be dropped onto a design surface.</li> <li>Examples:<ul> <li>A Timer object is an example of a component</li> <li>A Button object is an example of a control</li> </ul> </li> <li>All controls are also components, but not all components are controls.</li> <li>In a ScriptoForm script, both controls and components are collectively instantiated in the Controls region.</li> </ul>"},{"location":"Forms/Control-vs-Component/#references","title":"References","text":"<p>Differences between a control and a component (net-informations.com)</p>"},{"location":"Forms/Default%20Font/","title":"Default Font","text":"<p>In a ScriptoForm, starting with PowerShell 7, the default font size and family have changed and no longer match what was used with previous versions (Windows PowerShell).  This is due to changes in the .NET framework used by PowerShell 7.  This can be changed back to the original font by setting the <code>Font</code> property of the form object.</p>"},{"location":"Forms/Default%20Font/#examples","title":"Examples:","text":"<pre><code>$FormMain.Font\u00a0=\u00a0New-Object\u00a0-TypeName System.Drawing.Font(\"MS\u00a0Sans\u00a0Serif\",8)\n</code></pre>"},{"location":"Forms/Default%20Font/#notes","title":"Notes","text":"<p>Some child controls of the form may not inherit this property and will require the value to be set separately at the control level.</p>"},{"location":"Forms/Default%20Font/#references","title":"References","text":"<p>Default font changes</p>"},{"location":"Forms/Enable%20Visual%20Styles/","title":"Enable Visual Styles","text":"<p>In a ScriptoForm, the EnableVisualStyles static .NET function enables visual styles for the application.  Visual styles are the colors, fonts, and other visual elements that form an operating system theme. This function gives the controls used in a script a more modern and aesthetically pleasing appearance.</p>"},{"location":"Forms/Enable%20Visual%20Styles/#examples","title":"Examples","text":"<pre><code>Add-Type -AssemblyName System.Windows.Forms\n[System.Windows.Forms.Application]::EnableVisualStyles()\n</code></pre>"},{"location":"Forms/Enable%20Visual%20Styles/#notes","title":"Notes","text":"<p>The \"EnableVisualStyles\" function is defined in the \"System.Windows.Forms\" namespace and must be called after loading the assembly for it.  To have an effect,\u00a0this function must be called before instantiating any controls objects.</p>"},{"location":"Forms/Enable%20Visual%20Styles/#references","title":"References","text":"<p>Application.EnableVisualStyles Method (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Forms/MessageBox/","title":"MessageBox","text":"<p>In a ScriptoForm, a MessageBox displays a message window, also known as a dialog box, which presents a message to the user.  For example, the ScriptoForm may use a MessageBox to notify the user that action has completed or that an error has occurred.</p> <p></p>"},{"location":"Forms/MessageBox/#examples","title":"Examples","text":"<pre><code>Add-Type -AssemblyName System.Windows.Forms\n[System.Windows.Forms.Application]::EnableVisualStyles()\n\n#\u00a0Show\u00a0informational\u00a0icon\n[void][System.Windows.Forms.MessageBox]::Show(\n    \"This\u00a0is\u00a0a\u00a0test.\",\n    \"Title\",\n    [System.Windows.Forms.MessageBoxButtons]::OK,\n    [System.Windows.Forms.MessageBoxIcon]::Information\n)\n\n#\u00a0Show\u00a0warning\u00a0icon\n[void][System.Windows.Forms.MessageBox]::Show(\n    \"This\u00a0is\u00a0a\u00a0test.\",\n    \"Title\",\n    [System.Windows.Forms.MessageBoxButtons]::OK,\n    [System.Windows.Forms.MessageBoxIcon]::Warning\n)\n</code></pre>"},{"location":"Forms/MessageBox/#notes","title":"Notes","text":"<p>The <code>System.Windows.Forms</code> assembly must be loaded prior to using a MessageBox.</p>"},{"location":"Forms/MessageBox/#references","title":"References","text":"<p>MessageBox Class (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Regions/Appearance/","title":"Appearance Region","text":"<p>The Appearance region is used to call the \"EnableVisualStyles\" static .NET function which enables visual styles for the application - no other code should exist in this region.  Visual styles provides a modern and aesthetically pleasing appearance, that matches operating system theme, to the ScriptoForm.  The \"EnableVisualStyles\" function is defined in the \"System.Windows.Forms\" namespace and must be called after loading the assembly for it.</p> <p>This region is denoted with the \"#region Appearance\" tag and occurs between the Assemblies and Controls regions in a ScriptoForm script.</p>"},{"location":"Regions/Appearance/#examples","title":"Examples","text":"<pre><code>#region Appearance\n[System.Windows.Forms.Application]::EnableVisualStyles()\n#endregion\n</code></pre>"},{"location":"Regions/Appearance/#references","title":"References","text":"<p>Application.EnableVisualStyles Method (System.Windows.Forms) | Microsoft Learn</p>"},{"location":"Regions/Assemblies/","title":"Assemblies Region","text":"<p>The Assemblies region is used to load the \"System.Windows.Forms\" Assembly to the ScriptoForm with the Add-Type cmdlet.  This allows for .NET forms and controls to be used with the script.  This assembly must be loaded prior to instantiating any form or control.</p> <p>This region is denoted with the \"#region Assemblies\" tag and occurs between the Settings and Appearance regions in a ScriptoForm script.</p>"},{"location":"Regions/Assemblies/#examples","title":"Examples","text":"<pre><code>#region Assemblies\nAdd-Type -AssemblyName System.Windows.Forms\n#endregion\n</code></pre>"},{"location":"Regions/Assemblies/#references","title":"References","text":"<p>Assemblies in .NET | Microsoft Learn</p>"},{"location":"Regions/Controls/","title":"Controls Region","text":"<p>The Controls region is used to instantiate the child control and component objects of the form.  This typically includes buttons, textboxes, labels, and combo boxes.  These classes are defined in the \"System.Windows.Forms\" .NET namespace, and must be instantiated after that assembly has been loaded.</p> <p>This region is denoted with the \"#region Controls\" tag and must occur between the Appearance <sup>1</sup> and Forms regions in a ScriptoForm script.</p>"},{"location":"Regions/Controls/#code-example","title":"Code Example","text":"<pre><code>#region Controls\n$FormMain = New-Object -TypeName System.Windows.Forms.Form\n$GroupBoxMain = New-Object -TypeName System.Windows.Forms.GroupBox\n$LabelServerName = New-Object -TypeName System.Windows.Forms.Label\n$TextBoxServerName = New-Object -TypeName System.Windows.Forms.TextBox\n$ButtonRun = New-Object -TypeName System.Windows.Forms.Button\n$ButtonClose = New-Object -TypeName System.Windows.Forms.Button\n$StatusStripMain = New-Object -TypeName System.Windows.Forms.StatusStrip\n$ToolStripStatusLabelMain = New-Object -TypeName System.Windows.Forms.ToolStripStatusLabel\n$ErrorProviderMain = New-Object -TypeName System.Windows.Forms.ErrorProvider\n#endregion\n</code></pre>"},{"location":"Regions/Controls/#notes","title":"Notes","text":"<p>Although called Controls, this region can contain both components and controls.  Although a control is type of component, it is more typically found in this region due to its graphical nature, and hence that name that is used.</p> <ol> <li> <p>Changes with .NET 6 and newer: Starting with Microsoft .NET 6, the \"EnableVisualStyles()\" static function, located in the Appearance region, must be called before controls are instantiated in order for visual styles to work.  Prior to this version, the function could be called anywhere within the script below the loading of the \"System.Windows.Forms\" namespace assembly.\u00a0\u21a9</p> </li> </ol>"},{"location":"Regions/Forms/","title":"Forms Region","text":"<p>The Forms region is used to define the script block for each Windows form used in the ScriptoForm script.  Each script block performs the following actions for it's respective form:</p> <ul> <li>Sets the form properties and declares Event Handlers for the form</li> <li>For each child control/component that will exist in the form, sets the properties and declares Event Handlers for it</li> <li>Calls the \"ShowDialog()\" method to display the form</li> <li>After the form has closed, calls the \"Dispose()\" method to dispose of the resource used by the form</li> </ul> <p>Each ScriptoForm script should include at least one form script block which is used to show the main form for the ScriptoForm.  This script block is typically named \"$ShowFormMain\".</p> <p>This region is denoted with the \"#region Forms\" tag and must occur between the Controls and Functions regions in a ScriptoForm script.</p>"},{"location":"Regions/Forms/#examples","title":"Examples","text":"<pre><code>#region Forms\n$ShowFormMain =\n{\n    $FormWidth = 330\n\u00a0 \u00a0 $FormHeight = 260\n\n    $FormMain.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon((Get-Process -Id $PID).Path)\n    $FormMain.Text = \"Title\"\n    $FormMain.Font = New-Object -TypeName System.Drawing.Font(\"MS Sans Serif\",8)\n    $FormMain.ClientSize = New-Object -TypeName System.Drawing.Size($FormWidth,$FormHeight)\n    $FormMain.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen\n\u00a0 \u00a0 $FormMain.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedSingle\n    $FormMain.MaximizeBox = $false\n    $FormMain.AcceptButton = $ButtonRun\n    $FormMain.CancelButton = $ButtonClose\n    $FormMain.Add_Shown($FormMain_Shown)\n\n    $GroupBoxMain.Location = New-Object -TypeName System.Drawing.Point(10,5)\n    $GroupBoxMain.Size = New-Object -TypeName System.Drawing.Size(($FormWidth - 20),($FormHeight - 80))\n    $FormMain.Controls.Add($GroupBoxMain)\n\n    &lt;#\n    Assign control properties, event handlers, and containment here...\n    #&gt;\n\n    $ButtonRun.Location = New-Object -TypeName System.Drawing.Point(($FormWidth - 175),($FormHeight - 60))\n    $ButtonRun.Size = New-Object -TypeName System.Drawing.Size(75,25)\n    $ButtonRun.TabIndex = 100\n    $ButtonRun.Enabled = $false\n    $ButtonRun.Text = \"Run\"\n    $ButtonRun.Add_Click($ButtonRun_Click)\n    $FormMain.Controls.Add($ButtonRun)\n\n    $ButtonClose.Location = New-Object -TypeName System.Drawing.Point(($FormWidth - 85),($FormHeight - 60))\n    $ButtonClose.Size = New-Object -TypeName System.Drawing.Size(75,25)\n    $ButtonClose.TabIndex = 101\n    $ButtonClose.Text = \"Close\"\n    $ButtonClose.DialogResult = [System.Windows.Forms.DialogResult]::Cancel\n    $FormMain.Controls.Add($ButtonClose)\n\n    $StatusStripMain.SizingGrip = $false\n    $StatusStripMain.Font = New-Object -TypeName System.Drawing.Font(\"MS Sans Serif\",8)\n    [void]$StatusStripMain.Items.Add($ToolStripStatusLabelMain)\n    $FormMain.Controls.Add($StatusStripMain)\n\n    [void]$FormMain.ShowDialog()\n    $FormMain.Dispose()\n}\n#endregion\n</code></pre>"},{"location":"Regions/Functions/","title":"Functions Region","text":"<p>The Functions region is used define all PowerShell functions that are used throughout the ScriptoForm script.  If no functions are used within the ScriptoForm, this region can be removed from the script file.</p> <p>This region is denoted with the \"#region Functions\" tag and occurs between the Forms and Handlers regions in the ScriptoForm script.</p>"},{"location":"Regions/Functions/#code-example","title":"Code Example","text":"<pre><code>#region Functions\nfunction Import-ExchangeCommands\n{\n    param\n    (\n        [Parameter(Mandatory = $true,Position = 0)] [string]$MailServer,\n        [Parameter(Mandatory = $true,Position = 1)] [string[]]$ExchangeCommands,\n        [Parameter(Mandatory = $false,Position = 2)] [string]$CertificateFriendlyName\n    )\n\n    $Certificate = Get-ChildItem -Path Cert:\\CurrentUser\\My | Where-Object FriendlyName -eq $CertificateFriendlyName\n    $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri \"http://$MailServer/powershell/?SerializationLevel=Full\" -Authentication Kerberos -ErrorAction Stop\n    if ($Certificate) {Import-PSSession -Session $Session -Certificate $Certificate -DisableNameChecking -CommandName $ExchangeCommands -FormatTypeName *}\n    else {Import-PSSession -Session $Session -DisableNameChecking -CommandName $ExchangeCommands -FormatTypeName *}\n}\n\n&lt;#\nAdd function definitions here...\n#&gt;\n#endregion\n</code></pre>"},{"location":"Regions/Handlers/","title":"Handlers Region","text":"<p>The Handlers region is used to define all form, component, and control event handlers, which are script blocks that are executed when an event is raised.  Examples of events include clicking a button, typing text into a textbox, and showing a form.</p> <p>The region is denoted with the \"#region Handlers\" tag and occurs between the Functions and Main regions in the ScriptoForm script.</p>"},{"location":"Regions/Handlers/#code-example","title":"Code Example","text":"<pre><code>#region Handlers\n$FormMain_Shown =\n{\n    $ToolStripStatusLabelMain.Text = \"Ready\"\n    $StatusStripMain.Update()\n    $FormMain.Activate()\n}\n\n&lt;#\nAdd event handlers here...\n#&gt;\n\n$ButtonRun_Click =\n{\n    $ToolStripStatusLabelMain.Text = \"Working...please wait\"\n    $FormMain.Controls | Where-Object {$PSItem -isnot [System.Windows.Forms.StatusStrip]} | ForEach-Object {$PSItem.Enabled = $false}\n    $FormMain.Cursor = [System.Windows.Forms.Cursors]::WaitCursor\n    [System.Windows.Forms.Application]::DoEvents()\n\n    try\n    {\n        &lt;#\n        Do work here...\n        #&gt;\n    }\n    catch\n    {\n        &lt;#\n        Add custom exception handling here...\n        #&gt;\n        [void][System.Windows.Forms.MessageBox]::Show(\n            $PSItem.Exception.Message + \"`n`nPlease contact $SupportContact for technical support.\",\n            \"Exception\",\n            [System.Windows.Forms.MessageBoxButtons]::OK,\n            [System.Windows.Forms.MessageBoxIcon]::Warning\n        )\n    }\n\n    $FormMain.Controls | ForEach-Object {$PSItem.Enabled = $true}\n    $FormMain.ResetCursor()\n    &lt;#\n    Reset controls here...\n    #&gt;\n    $ToolStripStatusLabelMain.Text = \"Ready\"\n    $StatusStripMain.Update()\n}\n#endregion\n</code></pre>"},{"location":"Regions/Handlers/#references","title":"References","text":"<p>Event Handlers Overview - Windows Forms .NET Framework | Microsoft Learn</p>"},{"location":"Regions/Header/","title":"Header Region","text":"<p>The Header, designated by the use of PowerShell comment block and located at the very top of the script, is used to provide basic information about the ScriptoForm and usually includes the following information: - Script name - Script author - Script description (\"notes\")</p> <p>Unlike other sections, the Header section does not make use of a region tag identifier.  However, for consistency purposes, the term \"region\" is used to categorize this section of code.</p>"},{"location":"Regions/Header/#code-example","title":"Code Example","text":"<pre><code>&lt;#\n============================================================================================================================\nScript:\nAuthor: \n\nNotes:\n\n============================================================================================================================\n#&gt;\n</code></pre>"},{"location":"Regions/Main/","title":"Main Region","text":"<p>The\u00a0Main region is used to call the script block which displays the main form.  This region may perform other duties, depending on the function of the ScriptoForm, such as checking for the presence of required PowerShell modules before the main form is displayed or closing sessions to remote systems after the main form has closed.</p> <p>The region is denoted with the \"#region Main\" tag and occurs after the Handlers region in the ScriptoForm script.</p>"},{"location":"Regions/Main/#code-example","title":"Code Example","text":"<pre><code>#region Main\nInvoke-Command -ScriptBlock $ShowFormMain\n#endregion\n</code></pre>"},{"location":"Regions/Regions/","title":"Regions","text":"<p>Every ScriptoForm script file should follow the same format, facilitated with regions blocks, to allow for easier code navigation and maintenance.  A typical ScriptoForm script consists of nine standard script regions,  each with it's own specific purpose:</p> <ul> <li>Header</li> <li>Settings</li> <li>Assemblies</li> <li>Appearance</li> <li>Controls</li> <li>Forms</li> <li>Functions</li> <li>Handlers</li> <li>Main</li> </ul>"},{"location":"Regions/Regions/#examples","title":"Examples","text":"<pre><code>&lt;#\n============================================================================================================================\nScript: &lt;%= $PLASTER_PARAM_Name %&gt;\nAuthor: &lt;%= $PLASTER_PARAM_Author %&gt;\n\nNotes:\n\n============================================================================================================================\n#&gt;\n\n#region Settings\n&lt;#\nAdd global settings here...\n#&gt;\n$SupportContact = \"&lt;%= $PLASTER_PARAM_Author %&gt;\"\n#endregion\n\n#region Assemblies\nAdd-Type -AssemblyName System.Windows.Forms\n#endregion\n\n#region Appearance\n[System.Windows.Forms.Application]::EnableVisualStyles()\n#endregion\n\n#region Controls\n$FormMain = New-Object -TypeName System.Windows.Forms.Form\n$GroupBoxMain = New-Object -TypeName System.Windows.Forms.GroupBox\n&lt;#\nInstantiate control objects here...\n#&gt;\n$ButtonRun = New-Object -TypeName System.Windows.Forms.Button\n$ButtonClose = New-Object -TypeName System.Windows.Forms.Button\n$StatusStripMain = New-Object -TypeName System.Windows.Forms.StatusStrip\n$ToolStripStatusLabelMain = New-Object -TypeName System.Windows.Forms.ToolStripStatusLabel\n&lt;#\nInstantiate component objects here...\n#&gt;\n#endregion\n\n#region Forms\n$ShowFormMain =\n{\n    $FormWidth = 330\n\u00a0 \u00a0 $FormHeight = &lt;%= $PLASTER_PARAM_FormHeight %&gt;\n\u00a0 \u00a0     \n    $FormMain.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon((Get-Process -Id $PID).Path)\n    $FormMain.Text = \"Title\"\n    $FormMain.Font = New-Object -TypeName System.Drawing.Font(\"MS Sans Serif\",8)\n    $FormMain.ClientSize = New-Object -TypeName System.Drawing.Size($FormWidth,$FormHeight)\n    $FormMain.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen\n\u00a0 \u00a0 $FormMain.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedSingle\n    $FormMain.MaximizeBox = $false\n    $FormMain.AcceptButton = $ButtonRun\n    $FormMain.CancelButton = $ButtonClose\n    $FormMain.Add_Shown($FormMain_Shown)\n\n    $GroupBoxMain.Location = New-Object -TypeName System.Drawing.Point(10,5)\n    $GroupBoxMain.Size = New-Object -TypeName System.Drawing.Size(($FormWidth - 20),($FormHeight - 80))\n    $FormMain.Controls.Add($GroupBoxMain)\n\n    &lt;#\n\u00a0 \u00a0 Assign control properties and event handlers here and add to the GroupBox...\n\u00a0 \u00a0 #&gt;\n\n    $ButtonRun.Location = New-Object -TypeName System.Drawing.Point(($FormWidth - 175),($FormHeight - 60))\n    $ButtonRun.Size = New-Object -TypeName System.Drawing.Size(75,25)\n    $ButtonRun.TabIndex = 100\n    $ButtonRun.Enabled = $false\n    $ButtonRun.Text = \"Run\"\n    $ButtonRun.Add_Click($ButtonRun_Click)\n    $FormMain.Controls.Add($ButtonRun)\n\n    $ButtonClose.Location = New-Object -TypeName System.Drawing.Point(($FormWidth - 85),($FormHeight - 60))\n    $ButtonClose.Size = New-Object -TypeName System.Drawing.Size(75,25)\n    $ButtonClose.TabIndex = 101\n    $ButtonClose.Text = \"Close\"\n    $ButtonClose.DialogResult = [System.Windows.Forms.DialogResult]::Cancel\n    $FormMain.Controls.Add($ButtonClose)\n\n    $StatusStripMain.SizingGrip = $false\n    $StatusStripMain.Font = New-Object -TypeName System.Drawing.Font(\"MS Sans Serif\",8)\n    [void]$StatusStripMain.Items.Add($ToolStripStatusLabelMain)\n    $FormMain.Controls.Add($StatusStripMain)\n\n    &lt;#\n\u00a0 \u00a0 Assign component properties and event handlers here and add to the Form...\n\u00a0 \u00a0 #&gt;\n\n    [void]$FormMain.ShowDialog()\n    $FormMain.Dispose()\n}\n#endregion\n\n#region Functions\n&lt;#\nAdd function definitions here...\n#&gt;\n#endregion\n\n#region Handlers\n$FormMain_Shown =\n{\n    $ToolStripStatusLabelMain.Text = \"Ready\"\n    $StatusStripMain.Update()\n    $FormMain.Activate()\n}\n\n&lt;#\nAdd event handlers here...\n#&gt;\n\n$ButtonRun_Click =\n{\n    $ToolStripStatusLabelMain.Text = \"Working...please wait\"\n    $FormMain.Controls | Where-Object {$PSItem -isnot [System.Windows.Forms.StatusStrip]} | ForEach-Object {$PSItem.Enabled = $false}\n    $FormMain.Cursor = [System.Windows.Forms.Cursors]::WaitCursor\n    [System.Windows.Forms.Application]::DoEvents()\n\n    try\n    {\n        &lt;#\n        Do work here...\n        #&gt;\n    }\n    catch\n    {\n        &lt;#\n        Add custom exception handling here...\n        #&gt;\n        [void][System.Windows.Forms.MessageBox]::Show(\n            $PSItem.Exception.Message + \"`n`nPlease contact $SupportContact for technical support.\",\n            \"Exception\",\n            [System.Windows.Forms.MessageBoxButtons]::OK,\n            [System.Windows.Forms.MessageBoxIcon]::Warning\n        )\n    }\n\n    $FormMain.Controls | ForEach-Object {$PSItem.Enabled = $true}\n    $FormMain.ResetCursor()\n    &lt;#\n    Reset controls here...\n    #&gt;\n    $ToolStripStatusLabelMain.Text = \"Ready\"\n    $StatusStripMain.Update()\n}\n#endregion\n\n#region Main\nInvoke-Command -ScriptBlock $ShowFormMain\n#endregion\n</code></pre>"},{"location":"Regions/Settings/","title":"Settings Region","text":"<p>The Settings region is used to declare PowerShell constant variables (\"settings\") that are used throughout the ScriptoForm script.  These usually represent unique values specific to your corporate environment, such as a specific DNS server IP address or Active Directory domain name, that will rarely or never change.  This region may also contain other constants specific to the script itself such as timeout values or fixed lists.  This region should never contain calculated or derived values.</p> <p>This region is denoted with the \"#region Settings\" tag and usually occurs between the Header and the Assemblies regions in a ScriptoForm script.</p>"},{"location":"Regions/Settings/#code-example","title":"Code Example","text":"<pre><code>#region Settings\n$DNSServer = \"10.10.10.1\"\n$DomainName = \"CORP.PRI\"\n$SupportContact = \"FirstName LastName\"\n#endregion\n</code></pre>"},{"location":"Snippets/Control%20placement%20with%20snippet%20hints/","title":"Control Pair placement with snippet hints","text":"<p>In a ScriptoForm, most controls come as a pair (an interactive control, such as a text box or combo box, and its partner label control) and these are collectively know as a control pair.  A standard ScriptoForm is designed such that:</p> <ul> <li>The vertical space between controls in a control pair is always 20 units</li> <li>The vertical space between control pairs is always 35 units</li> </ul> <p></p> <p>The Visual Studio Code snippets JSON file takes advantage of this standardization by including hints in the \"Location\" properties of control pairs to help you properly place them on the form.  As you tab through the control pair snippet, you will eventually land on the \"hint\" for the height property at which time you will need to provide a value based on the control pair you adding: the height of a label is always in relation to the previous control pair above it and the height of the interactive control is always in relation to its partner label control.</p>"},{"location":"Snippets/Control%20placement%20with%20snippet%20hints/#the-15p35-hint","title":"The \"15|P+35\" hint","text":"<p>This hint it typically used to determine the height of the label in a control pair:</p> <p>When adding the very first control pair to the form, use 15 for the height of the label.  For all other control pairs, use 35 plus the height of the previous interactive control to determine the height of the new label control you are adding</p>"},{"location":"Snippets/Control%20placement%20with%20snippet%20hints/#the-p20-hint","title":"The \"P+20\" hint","text":"<p>This hint it typically used to determine the height of the interactive control in a control pair:</p> <p>Use 20 plus the height of its partner label control</p>"},{"location":"Snippets/Control%20placement%20with%20snippet%20hints/#the-p-1-hint","title":"The \"P-1\" hint","text":"<p>This hint is unique to the \"Label &amp; TextBox &amp; Search Button\" control group, which has three controls in it.  The search button in this group is usually 1 unit less than the height of the textbox it is adjacent to, for appearance purposes.</p> <p></p> <p>Use 1 unit less than the height of its adjacent textbox control</p>"}]}